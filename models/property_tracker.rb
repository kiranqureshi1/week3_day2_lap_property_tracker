require('pg')

class PropertyTracker

  attr_accessor :value, :number_of_bedrooms, :year_built, :buy_let_status, :id

  def initialize( options )

    @id = options['id'].to_i if options['id']
    @value = options['value'].to_i
    @number_of_bedrooms = options['number_of_bedrooms'].to_i
    @year_built = options['year_built']
    @buy_let_status = options['buy_let_status']

  end


  def save

    db = PG.connect({dbname: 'property_tracker', host: 'localhost'})

    sql = "INSERT INTO properties(value, number_of_bedrooms, year_built, buy_let_status) VALUES ($1, $2, $3, $4) RETURNING id;"

    values = [@value, @number_of_bedrooms, @year_built, @buy_let_status]

    db.prepare("save", sql)

    @id = db.exec_prepared("save", values)[0]['id'].to_i

    db.close()
  end

  def update

    db = PG.connect({dbname: 'property_tracker', host: 'localhost'})
    sql = "UPDATE properties SET(value, number_of_bedrooms, year_built, buy_let_status) = ($1, $2, $3, $4) WHERE id = $5;"
    values = [@value, @number_of_bedrooms, @year_built, @buy_let_status, @id]
    db.prepare("update", sql)
    db.exec_prepared("update", values)
    db.close()
  end

  def PropertyTracker.all()

    db = PG.connect({dbname: 'property_tracker', host: 'localhost'})
    sql = "SELECT * FROM properties"
    db.prepare("all", sql)
    orders = db.exec_prepared("all")
    db.close
    return orders.map {|each| PropertyTracker.new(each)}
  end

  def PropertyTracker.delete_all

    db = PG.connect({dbname: 'property_tracker', host: 'localhost'})
    sql = "DELETE FROM properties"
    db.prepare('everything', sql)
    db.exec_prepared('everything')
    db.close
  end

  def delete()
    db = PG.connect({dbname: 'property_tracker', host: 'localhost'})
    sql = "DELETE FROM properties WHERE id = $1"
    values = [@id]
    db.prepare("delete_one", sql)
    db.exec_prepared("delete_one", values)
    db.close()
  end

  def find()
    db = PG.connect({dbname: 'property_tracker', host: 'localhost'})
    sql = "SELECT * FROM properties WHERE id = $1"
    values = [@id]
    db.prepare("find_one", sql)
    db.exec_prepared("find_one", values)
    db.close
  end

  def find_by_number_of_bedrooms
    db = PG.connect({dbname: 'property_tracker', host: 'localhost'})
    sql = "SELECT * FROM properties WHERE number_of_bedrooms = $1"
    values = [@number_of_bedrooms]
    db.prepare("find_one", sql)
    db.exec_prepared("find_one", values)
    db.close
  end




end




# Q1. Where are we instantiating instances of the Property class?
#console.rb

# Q2. Where are we defining the SQL that enables us to save the ruby Property object into the database?
#property_tracker.sql

# Q3. In console.rb, which lines modify the database?
#save, UPDATE, delete (lines >> 23-34)

# Q4. Why do we not define the id of a Property object at the point we instantiate it (‘new it up’)?
#because the database is responsible for giving the id.

# Q5. Where and how do we assign the property id (that is generated by the database) to the ruby object?
#SAVE method confused!!!!! explain please

# Q6. Why do we put a guard (an ‘if’ clause) on the @id attribute in the constructor?
#if db has id column then use @id in class property_tracker.rb

# Q7. Why are some of the CRUD actions represented by instance methods, and others, class methods?
#those which apply to the whole class will have a class method like delete_all and if it is for one particular row ( or instance) then just instance methods.

# Q8. What type of data structure is returned by db.exec() and db.exec_prepared(), and how do we index into it to pull out a desired attribute?
# array and db.exec_prepared() array of objects. we go into index position and then to a ....

# Q9. Why do we use prepared statements when performing database operations?
# to stop against SQL injection attacks

# Extension Questions
#
# Look at the find_by_id and find_by_address methods in the Property class.
#
# Q10. What do they take in as their arguments?
#
# Q11. What are their return values?
